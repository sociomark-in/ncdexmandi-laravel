<?php

namespace App\Http\Middleware;

use App\Models\Config;
use Closure;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Cookie;
use Illuminate\Support\Facades\Log;
use Symfony\Component\HttpFoundation\Response;

class SetGlobalTranslatorCookie
{
    /**
     * Handle an incoming request.
     *
     * @param  \Closure(\Illuminate\Http\Request): (\Symfony\Component\HttpFoundation\Response)  $next
     */
    public function handle(Request $request, Closure $next): Response
    {
        // First, allow the request to proceed to the controller
        // and get the response generated by the controller.
        $response = $next($request);

        // --- Check if the cookie exists before setting it ---

        $siteLanguage = Config::where('config_key', 'site_language')->first();

        $langCookie = 'googtrans';
        $lang = "/en/" . $siteLanguage->config_value;

        if (!$request->hasCookie($langCookie)) {
            // Cookie does NOT exist, so set it
            $expirationMinutes = 0; // For Session Expire


            // Method: Using the Cookie Facade's queue method
            Cookie::queue(
                $langCookie,  // Name
                $lang ?? "mr/hi",      // Value
                $expirationMinutes,    // Minutes to live
                '/',                   // Path
                config('session.domain'), // Domain (from your session config, or null for current host)
                config('session.secure'), // Secure (from your session config, or true for HTTPS)
                false,                  // HttpOnly (true to prevent JavaScript access)
                true,                 // Raw (false by default, handles encoding)
            );


            // Optional: Log or display for testing
            Log::info("Middleware: New googtrans cookie set: " . $lang);
            // If you want to see immediate output in browser for testing,
            // you might add it to the response content (not recommended for production)
            // $response->setContent($response->getContent() . "<br>Setting new googtrans: " . $lang);

        } else {
            // Cookie already exists, retrieve and potentially use its value
            $existingLang = $request->cookie($langCookie);
            Log::info("Middleware: Existing googtrans cookie found: " . $existingLang);
            // $response->setContent($response->getContent() . "<br>Found existing googtrans: " . $existingVisitorId);
        }

        // --- You can also queue other cookies unconditionally here if needed ---
        // Cookie::queue('last_visited_page', $request->fullUrl(), 5);


        // Always return the response generated by the next middleware/controller
        return $response;
    }
}
